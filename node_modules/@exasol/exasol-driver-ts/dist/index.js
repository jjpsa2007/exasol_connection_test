'use strict';

var jsrsasign = require('jsrsasign');

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}

var ExaError = /** @class */ (function (_super) {
    __extends(ExaError, _super);
    function ExaError(message, additionalData) {
        var _this = _super.call(this, message) || this;
        _this.name = 'ExaError';
        _this.additionalData = additionalData;
        return _this;
    }
    return ExaError;
}(Error));
var ExaErrorBuilder = /** @class */ (function () {
    function ExaErrorBuilder(tag) {
        this._message = '';
        this.mitigations = [];
        this.tag = tag;
    }
    ExaErrorBuilder.prototype.message = function (message) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var filledMessage = this.fillPlaceholders(message, args);
        this._message += filledMessage;
        return this;
    };
    ExaErrorBuilder.prototype.fillPlaceholders = function (message, args) {
        return message.replace(/{{(.*?)}}/g, function (placeholder) {
            if (args.length > 0) {
                return "'".concat(args.shift(), "'");
            }
            else {
                return "<UNKNOWN PLACEHOLDER('" + placeholder + "')>";
            }
        });
    };
    ExaErrorBuilder.prototype.mitigation = function (mitigation) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        this.mitigations.push(this.fillPlaceholders(mitigation, args));
        return this;
    };
    ExaErrorBuilder.prototype.toString = function () {
        var result = this.tag + ': ' + this._message;
        if (this.mitigations.length > 0) {
            result += ' ' + this.mitigations.join(' ');
        }
        return result;
    };
    ExaErrorBuilder.prototype.error = function (additionalData) {
        return new ExaError(this.toString(), additionalData);
    };
    return ExaErrorBuilder;
}());

var ErrInvalidConn = new ExaErrorBuilder('E-EDJS-1').message('Invalid connection.').error();
var ErrClosed = new ExaErrorBuilder('E-EDJS-2').message('Connection was closed.').error();
var ErrMalformedData = new ExaErrorBuilder('E-EDJS-3').message('Malformed result.').error();
var ErrInvalidValuesCount = new ExaErrorBuilder('E-EDJS-4').message('Invalid value count for prepared status.').error();
var ErrLoggerNil = new ExaErrorBuilder('E-EDJS-5')
    .message('Logger is undefined or null.')
    .mitigation('Set logger in ExasolDriver constructor.')
    .error();
var ErrInvalidCredentials = new ExaErrorBuilder('E-EDJS-6').message('Invalid credentials.').error();
var ErrJobAlreadyRunning = new ExaErrorBuilder('E-EDJS-7').message('Another query is already running.').error();
var newPoolSizeErr = function (max) {
    return new ExaErrorBuilder('E-EDJS-8').message('Execution failed pool reached its limit from {{max}} parallel connections.', max).error();
};
var newInvalidHostRangeLimits = function (host) {
    return new ExaErrorBuilder('E-EDJS-9').message('Invalid host range limits: {{host name}}.', host).error();
};
var newInvalidReturnValueResultSet = new ExaErrorBuilder('E-EDJS-10')
    .message('Invalid result type.')
    .mitigation('Please use method query to execute sql')
    .error();
var newInvalidReturnValueRowCount = new ExaErrorBuilder('E-EDJS-11')
    .message('Invalid result type.')
    .mitigation('Please use method execute instead of query')
    .error();

var getURIScheme = function (encryption) {
    return encryption ? 'wss' : 'ws';
};

var Command = /** @class */ (function () {
    function Command(attributes) {
        this.attributes = attributes;
    }
    return Command;
}());
var LoginTokenSQLCommand = /** @class */ (function (_super) {
    __extends(LoginTokenSQLCommand, _super);
    function LoginTokenSQLCommand(protocolVersion, attributes) {
        var _this = _super.call(this, attributes) || this;
        _this.command = 'loginToken';
        _this.protocolVersion = protocolVersion;
        return _this;
    }
    return LoginTokenSQLCommand;
}(Command));
var LoginSQLCommand = /** @class */ (function (_super) {
    __extends(LoginSQLCommand, _super);
    function LoginSQLCommand(protocolVersion, attributes) {
        var _this = _super.call(this, attributes) || this;
        _this.command = 'login';
        _this.protocolVersion = protocolVersion;
        return _this;
    }
    return LoginSQLCommand;
}(Command));
var FetchCommand = /** @class */ (function (_super) {
    __extends(FetchCommand, _super);
    function FetchCommand(options, attributes) {
        var _this = _super.call(this, attributes) || this;
        _this.command = 'fetch';
        _this.resultSetHandle = options.resultSetHandle;
        _this.startPosition = options.startPosition;
        _this.numBytes = options.numBytes;
        return _this;
    }
    return FetchCommand;
}(Command));
var SQLBatchCommand = /** @class */ (function (_super) {
    __extends(SQLBatchCommand, _super);
    function SQLBatchCommand(sqlTexts, attributes) {
        var _this = _super.call(this, attributes) || this;
        _this.command = 'executeBatch';
        _this.sqlTexts = sqlTexts;
        return _this;
    }
    return SQLBatchCommand;
}(Command));
var SQLSingleCommand = /** @class */ (function (_super) {
    __extends(SQLSingleCommand, _super);
    function SQLSingleCommand(sqlText, attributes) {
        var _this = _super.call(this, attributes) || this;
        _this.command = 'execute';
        _this.sqlText = sqlText;
        return _this;
    }
    return SQLSingleCommand;
}(Command));
var CreatePreparedStatementCommand = /** @class */ (function (_super) {
    __extends(CreatePreparedStatementCommand, _super);
    function CreatePreparedStatementCommand(sqlText, attributes) {
        var _this = _super.call(this, attributes) || this;
        _this.command = 'createPreparedStatement';
        _this.sqlText = sqlText;
        return _this;
    }
    return CreatePreparedStatementCommand;
}(Command));
var CloseResultSetCommand = /** @class */ (function (_super) {
    __extends(CloseResultSetCommand, _super);
    function CloseResultSetCommand(resultSetHandles, attributes) {
        var _this = _super.call(this, attributes) || this;
        _this.command = 'closeResultSet';
        _this.resultSetHandles = resultSetHandles;
        return _this;
    }
    return CloseResultSetCommand;
}(Command));
var ExecutePreparedStatementCommand = /** @class */ (function (_super) {
    __extends(ExecutePreparedStatementCommand, _super);
    function ExecutePreparedStatementCommand(options, attributes) {
        var _this = _super.call(this, attributes) || this;
        _this.command = 'executePreparedStatement';
        _this.statementHandle = options.statementHandle;
        _this.columns = options.columns;
        _this.numColumns = options.numColumns;
        _this.data = options.data;
        _this.numRows = options.numRows;
        return _this;
    }
    return ExecutePreparedStatementCommand;
}(Command));
var ClosePreparedStatementCommand = /** @class */ (function (_super) {
    __extends(ClosePreparedStatementCommand, _super);
    function ClosePreparedStatementCommand(statementHandle, attributes) {
        var _this = _super.call(this, attributes) || this;
        _this.command = 'closePreparedStatement';
        _this.statementHandle = statementHandle;
        return _this;
    }
    return ClosePreparedStatementCommand;
}(Command));
var SetAttributesCommand = /** @class */ (function (_super) {
    __extends(SetAttributesCommand, _super);
    function SetAttributesCommand() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.command = 'setAttributes';
        return _this;
    }
    return SetAttributesCommand;
}(Command));
var DisconnectCommand = /** @class */ (function (_super) {
    __extends(DisconnectCommand, _super);
    function DisconnectCommand() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.command = 'disconnect';
        return _this;
    }
    return DisconnectCommand;
}(Command));
var AbortQueryCommand = /** @class */ (function (_super) {
    __extends(AbortQueryCommand, _super);
    function AbortQueryCommand() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.command = 'abortQuery';
        return _this;
    }
    return AbortQueryCommand;
}(Command));
var SchemasCommand = /** @class */ (function (_super) {
    __extends(SchemasCommand, _super);
    function SchemasCommand() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.command = 'getSchemas';
        return _this;
    }
    return SchemasCommand;
}(Command));
var RolesCommand = /** @class */ (function (_super) {
    __extends(RolesCommand, _super);
    function RolesCommand() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.command = 'getRoles';
        return _this;
    }
    return RolesCommand;
}(Command));
var TablesCommand = /** @class */ (function (_super) {
    __extends(TablesCommand, _super);
    function TablesCommand() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.command = 'getTables';
        return _this;
    }
    return TablesCommand;
}(Command));
var FunctionsCommand = /** @class */ (function (_super) {
    __extends(FunctionsCommand, _super);
    function FunctionsCommand() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.command = 'getFunctions';
        return _this;
    }
    return FunctionsCommand;
}(Command));
var ColumnsCommand = /** @class */ (function (_super) {
    __extends(ColumnsCommand, _super);
    function ColumnsCommand() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.command = 'getColumns';
        return _this;
    }
    return ColumnsCommand;
}(Command));
var ScriptsCommand = /** @class */ (function (_super) {
    __extends(ScriptsCommand, _super);
    function ScriptsCommand() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.command = 'getScripts';
        return _this;
    }
    return ScriptsCommand;
}(Command));
var UsersCommand = /** @class */ (function (_super) {
    __extends(UsersCommand, _super);
    function UsersCommand() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.command = 'getUsers';
        return _this;
    }
    return UsersCommand;
}(Command));

var Statement = /** @class */ (function () {
    function Statement(connection, pool, statementHandle, columns) {
        this.connection = connection;
        this.pool = pool;
        this.statementHandle = statementHandle;
        this.columns = columns;
    }
    /**
     * @inheritDoc
     */
    Statement.prototype.close = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.connection
                        .sendCommand(new ClosePreparedStatementCommand(this.statementHandle))
                        .then(function () {
                        _this.pool.release(_this.connection);
                        return;
                    })
                        .catch(function (err) {
                        _this.pool.release(_this.connection);
                        throw err;
                    })];
            });
        });
    };
    /**
     * @inheritDoc
     */
    Statement.prototype.execute = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            var columns, data, index, arg, colIndex;
            var _this = this;
            return __generator(this, function (_a) {
                columns = this.columns;
                if (args.length % columns.length !== 0) {
                    return [2 /*return*/, Promise.reject(ErrInvalidValuesCount)];
                }
                data = Array(columns.length).fill([]);
                for (index = 0; index < args.length; index++) {
                    arg = args[index];
                    colIndex = index % columns.length;
                    data[colIndex].push(arg);
                }
                return [2 /*return*/, this.connection
                        .sendCommand(new ExecutePreparedStatementCommand({
                        columns: this.columns,
                        statementHandle: this.statementHandle,
                        numColumns: this.columns.length,
                        numRows: data[0].length,
                        data: data,
                    }))
                        .catch(function (err) {
                        _this.pool.release(_this.connection);
                        throw err;
                    })];
            });
        });
    };
    return Statement;
}());

var ConnectionPool = /** @class */ (function () {
    function ConnectionPool(max, logger) {
        if (max === void 0) { max = 1; }
        this.max = max;
        this.logger = logger;
        this.pool = new Map();
    }
    ConnectionPool.prototype.add = function (connection) {
        return __awaiter(this, void 0, void 0, function () {
            var keys, index, key, item;
            return __generator(this, function (_a) {
                this.logger.debug("[Pool:".concat(connection.name, "] Add connection"));
                keys = Array.from(this.pool.keys());
                for (index = 0; index < keys.length; index++) {
                    key = keys[index];
                    item = this.pool.get(key);
                    if (item && (item === null || item === void 0 ? void 0 : item.connection.broken)) {
                        this.logger.debug("[Pool:".concat(connection.name, "] Delete connection"), item);
                        this.pool.delete(key);
                    }
                }
                if (this.pool.size === this.max) {
                    return [2 /*return*/, Promise.reject(newPoolSizeErr(this.max))];
                }
                this.pool.set(connection.name, { claimed: false, connection: connection });
                return [2 /*return*/];
            });
        });
    };
    ConnectionPool.prototype.getAll = function () {
        return Array.from(this.pool.values()).map(function (item) { return item.connection; });
    };
    ConnectionPool.prototype.clear = function () {
        this.pool.clear();
    };
    ConnectionPool.prototype.release = function (connection) {
        this.logger.debug("[Pool:".concat(connection.name, "] Release connection"));
        this.pool.set(connection.name, { claimed: false, connection: connection });
    };
    ConnectionPool.prototype.acquire = function () {
        var keys = Array.from(this.pool.keys());
        for (var index = 0; index < keys.length; index++) {
            var key = keys[index];
            var item = this.pool.get(key);
            if (!item) {
                continue;
            }
            if (item.claimed) {
                continue;
            }
            var connection = item.connection;
            if (!connection.active && !(connection === null || connection === void 0 ? void 0 : connection.broken)) {
                item.claimed = true;
                this.logger.debug("[Pool:".concat(connection.name, "] Assign connection"));
                return connection;
            }
        }
        return undefined;
    };
    return ConnectionPool;
}());

/* eslint-disable @typescript-eslint/no-explicit-any */
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["Off"] = 0] = "Off";
    LogLevel[LogLevel["Error"] = 1] = "Error";
    LogLevel[LogLevel["Warn"] = 2] = "Warn";
    LogLevel[LogLevel["Info"] = 3] = "Info";
    LogLevel[LogLevel["Debug"] = 4] = "Debug";
    LogLevel[LogLevel["Trace"] = 5] = "Trace";
})(LogLevel || (LogLevel = {}));
var Logger = /** @class */ (function () {
    function Logger(level) {
        this.level = LogLevel.Debug;
        this.emptyLog = function () {
            /*empty */
        };
        if (level) {
            this.level = level;
        }
    }
    Object.defineProperty(Logger.prototype, "error", {
        get: function () {
            if (this.level >= LogLevel.Error) {
                return this._log('ERROR', 'red');
            }
            return this.emptyLog;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Logger.prototype, "warn", {
        get: function () {
            if (this.level >= LogLevel.Warn) {
                return this._log('WARN', 'darkorange');
            }
            return this.emptyLog;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Logger.prototype, "log", {
        get: function () {
            return this.debug;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Logger.prototype, "info", {
        get: function () {
            if (this.level >= LogLevel.Info) {
                return this._log('INFO', 'blue');
            }
            return this.emptyLog;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Logger.prototype, "version", {
        // Used to print version, independent of the log level
        get: function () {
            return this._log('INFO', 'blue');
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Logger.prototype, "debug", {
        get: function () {
            if (this.level >= LogLevel.Debug) {
                return this._log('DEBUG');
            }
            return this.emptyLog;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Logger.prototype, "trace", {
        get: function () {
            if (this.level >= LogLevel.Trace) {
                return this._log('TRACE');
            }
            return this.emptyLog;
        },
        enumerable: false,
        configurable: true
    });
    Logger.prototype._log = function (level, color) {
        if (color === void 0) { color = 'inherit'; }
        return console.log.bind(console, "%c[".concat(new Date().toISOString(), "] %c").concat(level, "%c: %s"), 'color: gray', 'color: ' + color, 'color: inherit');
    };
    return Logger;
}());

var fetchData = function (rawData, connection, logger, resultSetMaxRows) { return __awaiter(void 0, void 0, void 0, function () {
    var batchResponse, index, response, fetched;
    var _a, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                batchResponse = rawData.responseData;
                index = 0;
                _c.label = 1;
            case 1:
                if (!((_a = index < (batchResponse === null || batchResponse === void 0 ? void 0 : batchResponse.numResults)) !== null && _a !== void 0 ? _a : 0)) return [3 /*break*/, 4];
                response = batchResponse.results[index];
                logger.debug('[WebSQL]: Fetch more data for: ', (_b = response === null || response === void 0 ? void 0 : response.resultSet) === null || _b === void 0 ? void 0 : _b.resultSetHandle);
                if (!((response === null || response === void 0 ? void 0 : response.resultType) === 'resultSet' && response.resultSet)) return [3 /*break*/, 3];
                return [4 /*yield*/, fetchMoreData(response.resultSet, response.resultSet.numRowsInMessage, Math.min(response.resultSet.numRows, resultSetMaxRows !== null && resultSetMaxRows !== void 0 ? resultSetMaxRows : response.resultSet.numRows), resultSetMaxRows !== null && resultSetMaxRows !== void 0 ? resultSetMaxRows : response.resultSet.numRows, connection, logger)];
            case 2:
                fetched = _c.sent();
                batchResponse.results[index].resultSet = fetched;
                logger.debug('[WebSQL]: Closing ResultSet', response.resultSet.resultSetHandle);
                if (response.resultSet.resultSetHandle) {
                    connection.sendCommandWithNoResult(new CloseResultSetCommand([response.resultSet.resultSetHandle]));
                }
                logger.debug('[WebSQL]: Loaded all data');
                _c.label = 3;
            case 3:
                index++;
                return [3 /*break*/, 1];
            case 4: return [2 /*return*/, {
                    responseData: batchResponse,
                    status: rawData.status,
                    exception: rawData.exception,
                }];
        }
    });
}); };
var fetchMoreData = function (resultSet, fetchedRows, expectedRows, resultSetMaxRows, connection, logger) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                logger.debug('[WebSQL]: fetchMoreData:', fetchedRows, expectedRows);
                if (!(fetchedRows < expectedRows && resultSet.resultSetHandle)) return [3 /*break*/, 2];
                return [4 /*yield*/, sendFetchCommand(resultSet.resultSetHandle, fetchedRows, connection).then(function (fetchResponse) { return __awaiter(void 0, void 0, void 0, function () {
                        var index, rows, alreadyFetchedRows, rowsUntilMax;
                        var _a, _b, _c;
                        return __generator(this, function (_d) {
                            switch (_d.label) {
                                case 0:
                                    resultSet.data = (_a = resultSet.data) !== null && _a !== void 0 ? _a : [];
                                    if (fetchResponse.responseData.data) {
                                        for (index = 0; index < fetchResponse.responseData.data.length; index++) {
                                            rows = fetchResponse.responseData.data[index];
                                            alreadyFetchedRows = (_b = resultSet.data[index]) !== null && _b !== void 0 ? _b : [];
                                            rowsUntilMax = Math.min(rows.length, resultSetMaxRows - alreadyFetchedRows.length);
                                            resultSet.data[index] = __spreadArray(__spreadArray([], alreadyFetchedRows, true), rows.slice(0, rowsUntilMax), true);
                                        }
                                    }
                                    if (((_c = resultSet.data[0]) !== null && _c !== void 0 ? _c : []).length === resultSetMaxRows) {
                                        resultSet.numRowsInMessage = resultSetMaxRows;
                                        return [2 /*return*/, resultSet];
                                    }
                                    resultSet.numRowsInMessage = fetchedRows + fetchResponse.responseData.numRows;
                                    return [4 /*yield*/, fetchMoreData(resultSet, fetchedRows + fetchResponse.responseData.numRows, expectedRows, resultSetMaxRows, connection, logger)];
                                case 1:
                                    resultSet = _d.sent();
                                    return [2 /*return*/];
                            }
                        });
                    }); })];
            case 1:
                _a.sent();
                _a.label = 2;
            case 2: return [2 /*return*/, resultSet];
        }
    });
}); };
var sendFetchCommand = function (resultSetHandle, startPosition, connection) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2 /*return*/, connection.sendCommand(new FetchCommand({
                numBytes: 10000,
                resultSetHandle: resultSetHandle,
                startPosition: startPosition,
            }))];
    });
}); };

var OPEN = 1;
/** The connection is in the process of closing. */
var CLOSING = 2;
/** The connection is closed. */
var CLOSED = 3;
var Connection = /** @class */ (function () {
    function Connection(websocket, logger, name) {
        this.websocket = websocket;
        this.logger = logger;
        this.name = name;
        this.isInUse = false;
        this.isBroken = false;
    }
    Object.defineProperty(Connection.prototype, "active", {
        get: function () {
            return this.isInUse;
        },
        set: function (v) {
            this.isInUse = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Connection.prototype, "connection", {
        get: function () {
            return this.websocket;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Connection.prototype, "broken", {
        get: function () {
            return this.isBroken;
        },
        enumerable: false,
        configurable: true
    });
    Connection.prototype.close = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.connection && this.connection.readyState === OPEN)) return [3 /*break*/, 4];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.sendCommand(new DisconnectCommand())];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        _a.sent();
                        this.logger.warn("[Connection:".concat(this.name, "] Graceful closing failed"));
                        return [3 /*break*/, 4];
                    case 4:
                        this.connection.onerror = null;
                        this.connection.onclose = null;
                        this.connection.close();
                        this.logger.debug("[Connection:".concat(this.name, "] Closed connection"));
                        return [2 /*return*/];
                }
            });
        });
    };
    Connection.prototype.sendCommandWithNoResult = function (cmd) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (!this.connection || this.connection.readyState === CLOSED || this.connection.readyState === CLOSING) {
                    this.isBroken = true;
                    return [2 /*return*/, Promise.reject(ErrClosed)];
                }
                this.logger.debug('[WebSQL]: Send request with no result:', cmd);
                this.connection.send(JSON.stringify(cmd));
                return [2 /*return*/];
            });
        });
    };
    Connection.prototype.sendCommand = function (cmd, getCancel) {
        var _this = this;
        if (!this.connection || this.connection.readyState === CLOSED || this.connection.readyState === CLOSING) {
            this.isBroken = true;
            return Promise.reject(ErrClosed);
        }
        var cancelQuery = function () {
            _this.sendCommandWithNoResult(new AbortQueryCommand());
        };
        getCancel && getCancel(cancelQuery);
        return new Promise(function (resolve, reject) {
            if (_this.connection === undefined) {
                _this.isBroken = true;
                reject(ErrInvalidConn);
            }
            else {
                _this.connection.onmessage = function (event) {
                    _this.active = false;
                    var data = JSON.parse(event.data);
                    _this.logger.debug("[Connection:".concat(_this.name, "] Received data"));
                    if (data.status !== 'ok') {
                        _this.logger.warn("[Connection:".concat(_this.name, "] Received invalid data or error"));
                        if (data.exception) {
                            resolve(data);
                        }
                        else {
                            reject(ErrMalformedData);
                        }
                        return;
                    }
                    resolve(data);
                };
                if (_this.active === true) {
                    reject(ErrJobAlreadyRunning);
                    return;
                }
                _this.logger.trace("[Connection:".concat(_this.name, "] Send request:"), cmd);
                _this.connection.send(JSON.stringify(cmd));
            }
        });
    };
    return Connection;
}());

var QueryResult = /** @class */ (function () {
    function QueryResult(resultSet) {
        this.resultSet = resultSet;
    }
    QueryResult.prototype.getColumns = function () {
        var _a, _b;
        return (_b = (_a = this.resultSet) === null || _a === void 0 ? void 0 : _a.columns) !== null && _b !== void 0 ? _b : [];
    };
    QueryResult.prototype.getRows = function () {
        var _a, _b, _c, _d;
        var result = [];
        var data = (_b = (_a = this.resultSet) === null || _a === void 0 ? void 0 : _a.data) !== null && _b !== void 0 ? _b : [];
        var columns = this.getColumns();
        for (var index = 0; index < ((_d = (_c = this.resultSet) === null || _c === void 0 ? void 0 : _c.numRowsInMessage) !== null && _d !== void 0 ? _d : 0); index++) {
            var row = {};
            for (var rowIndex = 0; rowIndex < columns.length; rowIndex++) {
                var element = data[rowIndex][index];
                row[columns[rowIndex].name] = element;
            }
            result.push(row);
        }
        return result;
    };
    return QueryResult;
}());

var driverVersion = 'v1.0.0';
var ExasolDriver = /** @class */ (function () {
    function ExasolDriver(websocketFactory, config, logger) {
        if (logger === void 0) { logger = new Logger(LogLevel.Debug); }
        this.defaultConfig = {
            host: 'localhost',
            port: 8563,
            fetchSize: 128 * 1024,
            clientName: 'Javascript client',
            clientVersion: '1',
            autocommit: true,
            encryption: true,
            compression: false,
            apiVersion: 3,
        };
        this.closed = false;
        // Used internally to avoid parallel execution
        this.pool = new ConnectionPool(1, logger);
        this.config = __assign(__assign(__assign({}, this.defaultConfig), config), { websocketFactory: websocketFactory });
        this.logger = logger;
    }
    /**
     * @inheritDoc
     */
    ExasolDriver.prototype.connect = function () {
        return __awaiter(this, void 0, void 0, function () {
            var hasCredentials, isBasicAuth, url, webSocket, connection;
            var _this = this;
            return __generator(this, function (_a) {
                hasCredentials = false;
                isBasicAuth = false;
                if (this.config.user && this.config.password) {
                    hasCredentials = true;
                    isBasicAuth = true;
                }
                if (this.config.refreshToken || this.config.accessToken) {
                    hasCredentials = true;
                }
                if (!hasCredentials) {
                    return [2 /*return*/, Promise.reject(ErrInvalidCredentials)];
                }
                if (!this.logger) {
                    return [2 /*return*/, Promise.reject(ErrLoggerNil)];
                }
                url = "".concat(getURIScheme(this.config.encryption), "://").concat(this.config.host, ":").concat(this.config.port);
                if (this.config.url) {
                    url = this.config.url;
                }
                webSocket = this.config.websocketFactory(url);
                connection = new Connection(webSocket, this.logger, Date.now() + '');
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        webSocket.onerror = function (err) {
                            _this.logger.debug('SQLClient] OnError', err);
                            if (_this.config.onError) {
                                _this.config.onError();
                            }
                            _this.close();
                            reject(ErrInvalidConn);
                        };
                        webSocket.onclose = function () {
                            _this.logger.debug('[SQLClient] Got close event');
                            if (_this.config.onClose) {
                                _this.config.onClose();
                            }
                            connection.close();
                            reject(ErrClosed);
                        };
                        webSocket.onopen = function () {
                            _this.logger.debug('[SQLClient] Login');
                            _this.pool
                                .add(connection)
                                .then(function () {
                                if (isBasicAuth) {
                                    return _this.loginBasicAuth();
                                }
                                return _this.loginTokenAuth();
                            })
                                .then(function (data) {
                                if (data.status !== 'ok') {
                                    reject(data.exception);
                                    return;
                                }
                                resolve();
                                return;
                            })
                                .catch(function (err) {
                                reject(err);
                            });
                        };
                    })];
            });
        });
    };
    /**
     * @inheritDoc
     */
    ExasolDriver.prototype.cancel = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.sendCommandWithNoResult({
                            command: 'abortQuery',
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @inheritDoc
     */
    ExasolDriver.prototype.close = function () {
        return __awaiter(this, void 0, void 0, function () {
            var connections, index, connection;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.closed) {
                            return [2 /*return*/];
                        }
                        this.closed = true;
                        this.logger.debug('[SQLClient] Close all connections');
                        connections = this.pool.getAll();
                        index = 0;
                        _a.label = 1;
                    case 1:
                        if (!(index < connections.length)) return [3 /*break*/, 4];
                        connection = connections[index];
                        return [4 /*yield*/, connection.close()];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        index++;
                        return [3 /*break*/, 1];
                    case 4:
                        this.pool.clear();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @inheritDoc
     */
    ExasolDriver.prototype.sendCommandWithNoResult = function (cmd) {
        return __awaiter(this, void 0, void 0, function () {
            var connection;
            var _this = this;
            return __generator(this, function (_a) {
                if (this.closed) {
                    return [2 /*return*/, Promise.reject(ErrClosed)];
                }
                connection = this.pool.acquire();
                if (connection) {
                    return [2 /*return*/, connection
                            .sendCommandWithNoResult(cmd)
                            .then(function () {
                            _this.pool.release(connection);
                            return;
                        })
                            .catch(function (err) {
                            _this.pool.release(connection);
                            throw err;
                        })];
                }
                return [2 /*return*/, Promise.reject(ErrClosed)];
            });
        });
    };
    ExasolDriver.prototype.query = function (sqlStatement, attributes, getCancel, responseType) {
        return __awaiter(this, void 0, void 0, function () {
            var connection;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.acquire()];
                    case 1:
                        connection = _a.sent();
                        return [2 /*return*/, connection
                                .sendCommand(new SQLSingleCommand(sqlStatement, attributes), getCancel)
                                .then(function (data) {
                                return fetchData(data, connection, _this.logger, _this.config.resultSetMaxRows);
                            })
                                .then(function (data) {
                                if (connection) {
                                    _this.pool.release(connection);
                                }
                                return data;
                            })
                                .then(function (data) {
                                if (data.responseData.numResults === 0) {
                                    throw ErrMalformedData;
                                }
                                if (data.responseData.results[0].resultType === 'rowCount') {
                                    throw newInvalidReturnValueRowCount;
                                }
                                if (responseType == 'raw') {
                                    return data;
                                }
                                return new QueryResult(data.responseData.results[0].resultSet);
                            })
                                .catch(function (err) {
                                if (connection) {
                                    _this.pool.release(connection);
                                }
                                throw err;
                            })];
                }
            });
        });
    };
    ExasolDriver.prototype.execute = function (sqlStatement, attributes, getCancel, responseType) {
        return __awaiter(this, void 0, void 0, function () {
            var connection;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.acquire()];
                    case 1:
                        connection = _a.sent();
                        return [2 /*return*/, connection
                                .sendCommand(new SQLSingleCommand(sqlStatement, attributes), getCancel)
                                .then(function (data) {
                                return fetchData(data, connection, _this.logger, _this.config.resultSetMaxRows);
                            })
                                .then(function (data) {
                                if (connection) {
                                    _this.pool.release(connection);
                                }
                                return data;
                            })
                                .then(function (data) {
                                var _a;
                                if (data.responseData.numResults === 0) {
                                    throw ErrMalformedData;
                                }
                                if (data.responseData.results[0].resultType === 'resultSet') {
                                    throw newInvalidReturnValueResultSet;
                                }
                                if (responseType == 'raw') {
                                    return data;
                                }
                                return (_a = data.responseData.results[0].rowCount) !== null && _a !== void 0 ? _a : 0;
                            })
                                .catch(function (err) {
                                if (connection) {
                                    _this.pool.release(connection);
                                }
                                throw err;
                            })];
                }
            });
        });
    };
    /**
     * @inheritDoc
     */
    ExasolDriver.prototype.executeBatch = function (sqlStatements, attributes, getCancel) {
        return __awaiter(this, void 0, void 0, function () {
            var connection;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.acquire()];
                    case 1:
                        connection = _a.sent();
                        return [2 /*return*/, connection
                                .sendCommand(new SQLBatchCommand(sqlStatements, attributes), getCancel)
                                .then(function (data) {
                                return fetchData(data, connection, _this.logger, _this.config.resultSetMaxRows);
                            })
                                .then(function (data) {
                                if (connection) {
                                    _this.pool.release(connection);
                                }
                                return data;
                            })
                                .catch(function (err) {
                                if (connection) {
                                    _this.pool.release(connection);
                                }
                                throw err;
                            })];
                }
            });
        });
    };
    /**
     * @inheritDoc
     */
    ExasolDriver.prototype.prepare = function (sqlStatement) {
        return __awaiter(this, void 0, void 0, function () {
            var connection;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.acquire()];
                    case 1:
                        connection = _a.sent();
                        return [2 /*return*/, connection
                                .sendCommand({
                                command: 'createPreparedStatement',
                                sqlText: sqlStatement,
                            })
                                .then(function (response) {
                                return new Statement(connection, _this.pool, response.responseData.statementHandle, response.responseData.parameterData.columns);
                            })];
                }
            });
        });
    };
    /**
     * @inheritDoc
     */
    ExasolDriver.prototype.sendCommand = function (cmd) {
        return __awaiter(this, void 0, void 0, function () {
            var connection;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.acquire()];
                    case 1:
                        connection = _a.sent();
                        return [2 /*return*/, connection
                                .sendCommand(cmd)
                                .then(function (data) {
                                if (connection) {
                                    _this.pool.release(connection);
                                }
                                return data;
                            })
                                .catch(function (err) {
                                if (connection) {
                                    _this.pool.release(connection);
                                }
                                throw err;
                            })];
                }
            });
        });
    };
    ExasolDriver.prototype.acquire = function () {
        return __awaiter(this, void 0, void 0, function () {
            var connection;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.closed) {
                            return [2 /*return*/, Promise.reject(ErrClosed)];
                        }
                        connection = this.pool.acquire();
                        if (!!connection) return [3 /*break*/, 2];
                        this.logger.debug("[SQLClient] Found no free connection and pool did not reach it's limit, will create new connection");
                        return [4 /*yield*/, this.connect()];
                    case 1:
                        _a.sent();
                        connection = this.pool.acquire();
                        _a.label = 2;
                    case 2:
                        if (!connection) {
                            return [2 /*return*/, Promise.reject(ErrInvalidConn)];
                        }
                        return [2 /*return*/, connection];
                }
            });
        });
    };
    ExasolDriver.prototype.loginBasicAuth = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommand({
                        command: 'login',
                        protocolVersion: this.config.apiVersion,
                    }).then(function (response) {
                        var _a, _b;
                        var key = jsrsasign.KEYUTIL.getKey({
                            n: response.responseData.publicKeyModulus,
                            e: response.responseData.publicKeyExponent,
                        });
                        var password = jsrsasign.KJUR.crypto.Cipher.encrypt((_a = _this.config.password) !== null && _a !== void 0 ? _a : '', key, 'RSA');
                        return _this.sendCommand({
                            username: (_b = _this.config.user) !== null && _b !== void 0 ? _b : '',
                            password: jsrsasign.hextob64(password),
                            useCompression: false,
                            clientName: _this.config.clientName,
                            driverName: "exasol-driver-js ".concat(driverVersion),
                            clientOs: 'Browser',
                            clientVersion: _this.config.clientVersion,
                            clientRuntime: 'Browser',
                            attributes: {
                                autocommit: _this.config.autocommit,
                                currentSchema: _this.config.schema,
                                compressionEnabled: _this.config.compression,
                            },
                        });
                    })];
            });
        });
    };
    ExasolDriver.prototype.loginTokenAuth = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendCommand({
                        command: 'loginToken',
                        protocolVersion: this.config.apiVersion,
                    }).then(function () {
                        var command = {
                            useCompression: false,
                            clientName: _this.config.clientName,
                            driverName: "exasol-driver-js ".concat(driverVersion),
                            clientOs: 'Browser',
                            clientVersion: _this.config.clientVersion,
                            clientRuntime: 'Browser',
                            attributes: {
                                autocommit: _this.config.autocommit,
                                currentSchema: _this.config.schema,
                                compressionEnabled: _this.config.compression,
                            },
                        };
                        if (_this.config.refreshToken) {
                            command.refreshToken = _this.config.refreshToken;
                        }
                        else {
                            command.accessToken = _this.config.accessToken;
                        }
                        return _this.sendCommand(command);
                    })];
            });
        });
    };
    return ExasolDriver;
}());

exports.AbortQueryCommand = AbortQueryCommand;
exports.ClosePreparedStatementCommand = ClosePreparedStatementCommand;
exports.CloseResultSetCommand = CloseResultSetCommand;
exports.ColumnsCommand = ColumnsCommand;
exports.Command = Command;
exports.Connection = Connection;
exports.CreatePreparedStatementCommand = CreatePreparedStatementCommand;
exports.DisconnectCommand = DisconnectCommand;
exports.ErrClosed = ErrClosed;
exports.ErrInvalidConn = ErrInvalidConn;
exports.ErrInvalidCredentials = ErrInvalidCredentials;
exports.ErrInvalidValuesCount = ErrInvalidValuesCount;
exports.ErrJobAlreadyRunning = ErrJobAlreadyRunning;
exports.ErrLoggerNil = ErrLoggerNil;
exports.ErrMalformedData = ErrMalformedData;
exports.ExasolDriver = ExasolDriver;
exports.ExecutePreparedStatementCommand = ExecutePreparedStatementCommand;
exports.FetchCommand = FetchCommand;
exports.FunctionsCommand = FunctionsCommand;
exports.LoginSQLCommand = LoginSQLCommand;
exports.LoginTokenSQLCommand = LoginTokenSQLCommand;
exports.RolesCommand = RolesCommand;
exports.SQLBatchCommand = SQLBatchCommand;
exports.SQLSingleCommand = SQLSingleCommand;
exports.SchemasCommand = SchemasCommand;
exports.ScriptsCommand = ScriptsCommand;
exports.SetAttributesCommand = SetAttributesCommand;
exports.Statement = Statement;
exports.TablesCommand = TablesCommand;
exports.UsersCommand = UsersCommand;
exports.driverVersion = driverVersion;
exports.newInvalidHostRangeLimits = newInvalidHostRangeLimits;
exports.newInvalidReturnValueResultSet = newInvalidReturnValueResultSet;
exports.newInvalidReturnValueRowCount = newInvalidReturnValueRowCount;
exports.newPoolSizeErr = newPoolSizeErr;
