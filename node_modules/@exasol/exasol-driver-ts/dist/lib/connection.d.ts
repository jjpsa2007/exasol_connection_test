import { SQLResponse } from './types';
import { Cancelable } from './sql-client.interface';
import { PoolItem } from './pool/pool';
import { ILogger } from './logger/logger';
import { Commands, CommandsNoResult } from './commands';
export interface ExaMessageEvent {
    data: unknown;
    type: string;
    target: unknown;
}
export interface ExaWebsocket {
    onmessage: ((event: any) => void) | null;
    onopen: ((event: any) => void) | null;
    onclose: ((this: any, ev: unknown) => unknown) | null;
    onerror: ((this: any, ev: unknown) => unknown) | null;
    send(data: string, cb?: (err?: Error) => void): void;
    close(): void;
    readonly readyState: number;
}
export declare class Connection implements PoolItem {
    private readonly websocket;
    private readonly logger;
    name: string;
    private isInUse;
    private isBroken;
    set active(v: boolean);
    get active(): boolean;
    get connection(): ExaWebsocket;
    get broken(): boolean;
    constructor(websocket: ExaWebsocket, logger: ILogger, name: string);
    close(): Promise<void>;
    sendCommandWithNoResult(cmd: CommandsNoResult): Promise<undefined>;
    sendCommand<T>(cmd: Commands, getCancel?: (cancel?: Cancelable) => void): Promise<SQLResponse<T>>;
}
