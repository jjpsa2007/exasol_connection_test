import { SQLQueryColumn } from './types';
export type Commands = BasicAuthSQLCommand | BasicAuthSQLCommand | LoginSQLCommand | LoginTokenSQLCommand | OIDCSQLCommand | BasicAuthSQLCommand | SQLBatchCommand | SQLSingleCommand | FetchCommand | CreatePreparedStatementCommand | ClosePreparedStatementCommand | ExecutePreparedStatementCommand | SchemasCommand | UsersCommand | RolesCommand | FunctionsCommand | ScriptsCommand | ColumnsCommand | TablesCommand | DisconnectCommand;
export type CommandsNoResult = AbortQueryCommand | CloseResultSetCommand;
export declare abstract class Command {
    abstract command: string;
    attributes?: Partial<Attributes>;
    constructor(attributes?: Partial<Attributes>);
}
export declare class LoginTokenSQLCommand extends Command {
    command: string;
    protocolVersion: number;
    constructor(protocolVersion: number, attributes?: Partial<Attributes>);
}
export declare class LoginSQLCommand extends Command {
    command: string;
    protocolVersion: number;
    constructor(protocolVersion: number, attributes?: Partial<Attributes>);
}
export declare class FetchCommand extends Command {
    command: string;
    resultSetHandle: number;
    startPosition: number;
    numBytes: number;
    constructor(options: {
        resultSetHandle: number;
        startPosition: number;
        numBytes: number;
    }, attributes?: Partial<Attributes>);
}
export declare class SQLBatchCommand extends Command {
    command: string;
    sqlTexts: string[];
    constructor(sqlTexts: string[], attributes?: Partial<Attributes>);
}
export declare class SQLSingleCommand extends Command {
    command: string;
    sqlText: string;
    constructor(sqlText: string, attributes?: Partial<Attributes>);
}
export declare class CreatePreparedStatementCommand extends Command {
    command: string;
    sqlText: string;
    constructor(sqlText: string, attributes?: Partial<Attributes>);
}
export declare class CloseResultSetCommand extends Command {
    command: string;
    resultSetHandles: number[];
    constructor(resultSetHandles: number[], attributes?: Partial<Attributes>);
}
export declare class ExecutePreparedStatementCommand extends Command {
    command: string;
    statementHandle: number;
    numColumns: number;
    numRows: number;
    columns: SQLQueryColumn[];
    data: Array<(string | number | boolean | null)[]>;
    constructor(options: {
        statementHandle: number;
        numColumns: number;
        numRows: number;
        columns: SQLQueryColumn[];
        data: Array<(string | number | boolean | null)[]>;
    }, attributes?: Partial<Attributes>);
}
export declare class ClosePreparedStatementCommand extends Command {
    command: string;
    statementHandle: number;
    constructor(statementHandle: number, attributes?: Partial<Attributes>);
}
export declare class SetAttributesCommand extends Command {
    command: string;
}
export declare class DisconnectCommand extends Command {
    command: string;
}
export declare class AbortQueryCommand extends Command {
    command: string;
}
export interface OIDCSQLCommand {
    accessToken?: string;
    refreshToken?: string;
    useCompression: boolean;
    clientName: string;
    driverName: string;
    clientOs: string;
    clientOsUsername?: string;
    clientVersion: string;
    clientRuntime: string;
    attributes: Attributes;
}
export interface BasicAuthSQLCommand {
    username: string;
    password: string;
    useCompression: boolean;
    sessionID?: number;
    clientName: string;
    driverName: string;
    clientOs?: string;
    clientOsUsername?: string;
    clientLanguage?: string;
    clientVersion: string;
    clientRuntime: string;
    attributes: Attributes;
}
export interface Attributes {
    autocommit?: boolean;
    compressionEnabled?: boolean;
    currentSchema?: string;
    dateFormat?: string;
    dateLanguage?: string;
    datetimeFormat?: string;
    defaultLikeEscapeCharacter?: string;
    feedbackInterval?: number;
    numericCharacters?: string;
    openTransaction?: boolean;
    queryTimeout?: number;
    snapshotTransactionsEnabled?: boolean;
    timestampUtcEnabled?: boolean;
    timezone?: string;
    timeZoneBehavior?: string;
    resultSetMaxRows?: number;
}
export declare class SchemasCommand extends Command {
    command: string;
}
export declare class RolesCommand extends Command {
    command: string;
}
export declare class TablesCommand extends Command {
    command: string;
}
export declare class FunctionsCommand extends Command {
    command: string;
}
export declare class ColumnsCommand extends Command {
    command: string;
}
export declare class ScriptsCommand extends Command {
    command: string;
}
export declare class UsersCommand extends Command {
    command: string;
}
