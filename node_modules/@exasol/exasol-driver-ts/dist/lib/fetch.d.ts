import { ResultSet, SQLQueriesResponse, SQLResponse } from './types';
import { ILogger } from './logger/logger';
import { Connection } from './connection';
export interface SqlStatementsPagedResponse {
    pageSize: number;
    data: SQLQueriesResponse;
    sqlStatements: string[];
    fetchPage: (resultSet: ResultSet, startIndex: number) => Promise<ResultSet>;
    /**
     * Closes all resultSets.
     * Must be called, once the SqlStatementsPagedResponse is no longer needed.
     */
    closeAllResultSets: () => void;
    isClosed: () => boolean;
}
/**
 * Get all resultSets contained in a SQLQueriesResponse
 * @param batch
 * @returns
 */
export declare function resultSets(batch: SQLQueriesResponse): ResultSet[];
export declare const fetchData: (rawData: SQLResponse<SQLQueriesResponse>, connection: Connection, logger: ILogger, resultSetMaxRows?: number) => Promise<SQLResponse<SQLQueriesResponse>>;
