import { SQLQueriesResponse, SQLResponse } from './types';
import { CetCancelFunction, IExasolDriver, IStatement } from './sql-client.interface';
import { ILogger } from './logger/logger';
import { ExaWebsocket } from './connection';
import { CommandsNoResult, Attributes, Commands } from './commands';
import { QueryResult } from './query-result';
export interface Config {
    host: string;
    url?: string;
    port: number;
    user?: string;
    password?: string;
    accessToken?: string;
    refreshToken?: string;
    autocommit: boolean;
    encryption: boolean;
    clientName: string;
    clientVersion: string;
    fetchSize: number;
    schema?: string;
    /** Limit max rows fetched */
    resultSetMaxRows?: number;
    onClose?: () => void;
    onError?: () => void;
}
export declare const driverVersion = "v1.0.0";
export type websocketFactory = (url: string) => ExaWebsocket;
export declare class ExasolDriver implements IExasolDriver {
    private readonly defaultConfig;
    private readonly config;
    private readonly logger;
    private closed;
    private readonly pool;
    constructor(websocketFactory: websocketFactory, config: Partial<Config>, logger?: ILogger);
    /**
     * @inheritDoc
     */
    connect(): Promise<void>;
    /**
     * @inheritDoc
     */
    cancel(): Promise<void>;
    /**
     * @inheritDoc
     */
    close(): Promise<void>;
    /**
     * @inheritDoc
     */
    sendCommandWithNoResult(cmd: CommandsNoResult): Promise<void>;
    /**
     * @inheritDoc
     */
    query(sqlStatement: string, attributes?: Partial<Attributes> | undefined, getCancel?: CetCancelFunction | undefined): Promise<QueryResult>;
    query(sqlStatement: string, attributes?: Partial<Attributes> | undefined, getCancel?: CetCancelFunction | undefined, responseType?: 'default' | undefined): Promise<QueryResult>;
    query(sqlStatement: string, attributes?: Partial<Attributes> | undefined, getCancel?: CetCancelFunction | undefined, responseType?: 'raw' | undefined): Promise<SQLResponse<SQLQueriesResponse>>;
    /**
     * @inheritDoc
     */
    execute(sqlStatement: string, attributes?: Partial<Attributes> | undefined, getCancel?: CetCancelFunction | undefined): Promise<number>;
    execute(sqlStatement: string, attributes?: Partial<Attributes> | undefined, getCancel?: CetCancelFunction | undefined, responseType?: 'default' | undefined): Promise<number>;
    execute(sqlStatement: string, attributes?: Partial<Attributes> | undefined, getCancel?: CetCancelFunction | undefined, responseType?: 'raw' | undefined): Promise<SQLResponse<SQLQueriesResponse>>;
    /**
     * @inheritDoc
     */
    executeBatch(sqlStatements: string[], attributes?: Partial<Attributes>, getCancel?: CetCancelFunction): Promise<SQLResponse<SQLQueriesResponse>>;
    /**
     * @inheritDoc
     */
    prepare(sqlStatement: string): Promise<IStatement>;
    /**
     * @inheritDoc
     */
    sendCommand<T>(cmd: Commands): Promise<SQLResponse<T>>;
    private acquire;
    private loginBasicAuth;
    private loginTokenAuth;
}
